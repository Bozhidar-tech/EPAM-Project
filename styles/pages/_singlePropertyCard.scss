@use "sass:color";
@use "../base/variables" as var;
@use "../base/mixins" as mix;
@use "sass:map";

i {
  color: var.$primary-color;
}

p {
  color: var.$text-color;
  font-size: map.get(var.$spacing-scale, "1");
}

.property-details-content {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: map.get(var.$spacing-scale, "4");
  margin-bottom: map.get(var.$spacing-scale, "2");
  align-items: stretch;

  @include mix.respond-to(var.$tablet) {
    grid-template-columns: 1fr;
  }
}

.property-image-wrapper,
.property-info-wrapper {
  display: flex;
  flex-direction: column;
  height: 500px;
}

.property-image-container {
  flex: 1;
  display: flex;
  align-items: center;
  justify-content: center;
  background-color: var.$card-bg-color;
  border-radius: var.$border-radius;
  box-shadow: var.$box-shadow;
  width: 100%;
  height: 100%;
  overflow: hidden;
  position: relative;

  img {
    width: 100%;
    height: 100%;
    object-fit: cover;

    @include mix.transition-all;
  }
}

.property-info {
  flex: 1;
  background-color: var.$card-bg-color;
  border-radius: var.$border-radius;
  box-shadow: var.$box-shadow;
  padding: map.get(var.$spacing-scale, "15");
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  gap: map.get(var.$spacing-scale, "1");
  width: 100%;
  height: 100%;

  h1 {
    color: var.$text-color;
    font-size: map.get(var.$spacing-scale, "2");
    margin-bottom: map.get(var.$spacing-scale, "05");
  }
}

.property-price {
  font-weight: bold;
  font-size: map.get(var.$spacing-scale, "15");
  color: var.$primary-color;
  margin-bottom: map.get(var.$spacing-scale, "05");
}

.property-location {
  display: flex;
  align-items: center;
  gap: map.get(var.$spacing-scale, "05");
  color: var.$secondary-color;
  margin-bottom: var.$spacing-unit;
}

.property-description {
  flex-grow: 1;
}

.property-features {
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  gap: map.get(var.$spacing-scale, "05");

  div {
    display: flex;
    align-items: center;
    gap: map.get(var.$spacing-scale, "05");
  }
}

.btn {
  margin-top: auto;
  align-self: center;

  &:hover {
    background-color: var.$btn-hover-color;
    transform: translateY(-1px);
  }
}

.property-map-container {
  grid-column: 1 / -1;
  margin-top: map.get(var.$spacing-scale, "2");
  padding: map.get(var.$spacing-scale, "1");
  background-color: var.$card-bg-color;
  border-radius: var.$border-radius;
  box-shadow: var.$box-shadow;

  h2 {
    color: var.$text-color;
    margin-bottom: map.get(var.$spacing-scale, "1");
    padding: 0 map.get(var.$spacing-scale, "1");
  }
}

.map {
  background-color: var.$card-bg-color;
  border-radius: var.$border-radius;
  height: 400px;
  width: calc(100% - #{map.get(var.$spacing-scale, "1") * 2});
  margin: 0 auto;
  position: relative;
}

.map-loading,
.map-error {
  display: flex;
  justify-content: center;
  align-items: center;
  flex-direction: column;
  height: 100%;
  text-align: center;
  padding: map.get(var.$spacing-scale, "2");

  p {
    font-size: map.get(var.$spacing-scale, "1");
  }
}

.spinner {
  width: map.get(var.$spacing-scale, "40px");
  height: map.get(var.$spacing-scale, "40px");
  border: 4px solid rgba(var.$primary-color, 0.3);
  border-radius: 50%;
  border-top-color: var.$primary-color;
  animation: spin 1s ease-in-out infinite;
  margin-bottom: map.get(var.$spacing-scale, "1");
}

@keyframes spin {
  to {
    transform: rotate(360deg);
  }
}

.error-message {
  background-color: var.$card-bg-color;
  border-radius: var.$border-radius;
  box-shadow: var.$box-shadow;
  display: flex;
  justify-content: center;  
  align-items: center;
  padding: map.get(var.$spacing-scale, "5");
  text-align: center;
  grid-column: 1 / -1;

  i {
    font-size: map.get(var.$spacing-scale, "25");
    color: var.$accent-color;
    margin-bottom: map.get(var.$spacing-scale, "1");
  }

  p {
    color: var.$text-color;
    font-size: map.get(var.$spacing-scale, "20px");
  }
}